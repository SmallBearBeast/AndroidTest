apply plugin: 'com.android.application'
apply plugin: 'com.google.protobuf'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.alibaba.arouter'
//apply plugin: 'android-aspectjx'
apply plugin: 'CustomTransformPlugin'
apply plugin: 'BuildSrcPlugin'

android {
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.example.administrator.androidtest"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        archivesBaseName = "wuyisong-$versionName-$versionCode"
        multiDexEnabled true

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        AROUTER_MODULE_NAME: project.getName(),
                        AROUTER_GENERATE_DOC: "enable"
                ]
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
//            minifyEnabled true
//            shrinkResources true
            buildConfigField("String", "HTTP_BASE", '"https://www.baidu.com/api/debug"')
            buildConfigField("String", "HAHA", "\"haahahah\"")
        }
    }

    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    sourceSets {
        main {
            java {
                srcDir 'src/main/java'
            }
            proto {
                srcDir 'src/main/proto'
            }
        }
    }

//    aspectjx {
//        exclude 'java.*', 'com.google', 'versions.9', 'com.appsflyer', 'com.android', 'leakcanary', 'kotlinx.coroutines'
//    }
}

protobuf {
    protoc {
        // The artifact spec for the Protobuf Compiler
        artifact = 'com.google.protobuf:protoc:3.1.0'
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {}
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    rootProject.ext.importDependencies(this, rootProject.ext.appDependenciesMap)
    implementation project(":libbase")
    implementation project(":libfresco")
    implementation project(":libokhttp")
    implementation project(":liblog")
    implementation project(":libframework")
//    implementation project(":libaspectj")
    implementation project(":libkv")
    implementation project(":librv")
    implementation project(":libcomponent")
//    implementation project(':flutter')

//    implementation 'com.github.SmallBearBeast.AndroidTest:liblog:1.0.7'
//    implementation 'com.github.SmallBearBeast.AndroidTest:libokhttp:1.0.7'
//    implementation 'com.github.SmallBearBeast.AndroidTest:libkv:1.0.7'
//    implementation 'com.github.SmallBearBeast.AndroidTest:libbase:1.0.7'
//    implementation 'com.github.SmallBearBeast.AndroidTest:libframework:1.0.7'
//    implementation 'com.github.SmallBearBeast.AndroidTest:librv:1.0.7'
//    implementation 'com.github.SmallBearBeast.AndroidTest:libcomponent:1.0.7'
//    implementation 'com.github.SmallBearBeast.AndroidTest:libfresco:1.0.7'
}

// Gradle Test
afterEvaluate {
    //是否是 Android 插件
    def isAppPlugin = project.plugins.hasPlugin('com.android.application')
    println("com.android.application = ${project.plugins.findPlugin('com.android.application')}")
    //获取变体
    def variants
    if (isAppPlugin) {
        variants = project.android.applicationVariants
    } else {
        variants = project.android.libraryVariants
    }
    println("isAppPlugin = $isAppPlugin")
    variants.each { variant ->
        //通过变体获取对应的 merge...Resources
        Task mergeResourcesTask = variant.mergeResources
        println("variant.name = ${variant.name}")
//        //定义自定义 Task 扩展前缀
//        def prefix = variant.name
//        //获取我们自定义的 Task
//        Task xmlViewScanTask = project.tasks.create("${prefix}XmlViewScanTask", XmlViewScanTask,variant)
//        //将我们自定义的 Task 挂接到 mergeResourcesTask
//        mergeResourcesTask.finalizedBy(xmlViewScanTask)
    }
}